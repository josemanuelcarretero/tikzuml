%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Start of tikz-uml.sty
%
% Some macros for UML Diagrams.
% Home page of project: 
% Author: Nicolas Kielbasiewicz
% Style from: 
% Fixed by Nicolas Kielbasiewicz (nicolas.kielbasiewicz@ensta-paristech.fr) in dec 2010 to compile with pgf 2.00

\NeedsTeXFormat{LaTeX2e}[1995/12/01]%
\ProvidesPackage{tikz-uml}[2011/01/26]%

\RequirePackage{ifthen}%
\RequirePackage{tikz}%
\RequirePackage{calc}%
\RequirePackage{pgfopts}%
\usetikzlibrary{arrows,shapes,fit,shadows}%

\def\tikzumlPackageLayersNum{2}
\pgfkeys{/tikzuml/options/.cd, packageLayers/.initial=3}%
\pgfkeys{/tikzuml/options/.cd, packageLayers/.store in=\tikzumlPackageLayersNum}%
\def\tikzumlStateLayersNum{2}
\pgfkeys{/tikzuml/options/.cd, stateLayers/.initial=3}%
\pgfkeys{/tikzuml/options/.cd, stateLayers/.store in=\tikzumlStateLayersNum}%

\ProcessPgfOptions{/tikzuml/options}

\def\pgfsetlayersArg{background}%
\newcounter{tikzumlStateLayers}%
%\setcounter{tikzumlStateLayers}{0}%
\newcounter{tikzumlPackageLayers}%
%\setcounter{tikzumlPackageLayers}{0}%
\pgfdeclarelayer{background}%
\loop \pgfdeclarelayer{state\thetikzumlStateLayers}%
  \xdef\pgfsetlayersArg{\pgfsetlayersArg,state\thetikzumlStateLayers}%
  \ifnum\tikzumlStateLayersNum>\thetikzumlStateLayers
  \stepcounter{tikzumlStateLayers}%
\repeat%
%
\loop \pgfdeclarelayer{package\thetikzumlPackageLayers}%
  \xdef\pgfsetlayersArg{\pgfsetlayersArg,package\thetikzumlPackageLayers}%
  \ifnum\tikzumlPackageLayersNum>\thetikzumlPackageLayers
  \stepcounter{tikzumlPackageLayers}%
\repeat%
%
\pgfdeclarelayer{connections}%
\pgfdeclarelayer{threadground}%
\xdef\pgfsetlayersArg{\pgfsetlayersArg,connections,threadground,main}%
\pgfsetlayers{\pgfsetlayersArg}

\tikzstyle{every picture}+=[remember picture]

\pgfkeys{/tikzuml/.cd, text/.initial=black, draw/.initial=black, font/.initial=\small,%
                       fill class/.initial=yellow!20, fill template/.initial=yellow!2, fill package/.initial=blue!20, fill note/.initial=green!20,%
                       fill usecase/.initial=blue!20, fill system/.initial=white,%
                       fill state/.initial={yellow!20, yellow!5},%
                       fill object/.initial=yellow!20,%
                       .unknown/.code={%
                         \let\keyname=\pgfkeyscurrentname%
                         \errmessage{TIKZUML ERROR : invalid option \keyname in tikzumlset}%
                       }}%
\pgfkeys{/tikzuml/.cd, text/.get=\tikzumltextcolor, draw/.get=\tikzumldrawcolor, font/.get=\tikzumlfont,%
                       fill class/.get=\tikzumlfillclasscolor, fill template/.get=\tikzumlfilltemplatecolor,%
                       fill package/.get=\tikzumlfillpackagecolor, fill note/.get=\tikzumlfillnotecolor,%
                       fill usecase/.get=\tikzumlfillusecasecolor, fill system/.get=\tikzumlfillsystemcolor,%
                       fill state/.get=\tikzumlfillstatecolor,%
                       fill object/.get=\tikzumlfillobjectcolor}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       class diagrams                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pgfkeys{/tikzuml/relation/.cd, attr1/.style args={#1|#2}{arg1=#1, mult1=#2},%
                                attr2/.style args={#1|#2}{arg2=#1, mult2=#2},%
                                attr/.style args={#1|#2}{arg=#1, mult=#2},%
                                recursive/.style args={#1|#2|#3}{angle1=#1, angle2=#2, loopsize=#3},%
                                anchors/.style args={#1 and #2}{anchor1=#1, anchor2=#2}}%

\tikzstyle{tikzuml class style}=[rectangle split, rectangle split parts=3, minimum height=2em, minimum width=10ex, node distance=2em]%
\tikzstyle{tikzuml template style}=[dashed, inner ysep=0.7em, inner xsep=1ex]%
\tikzstyle{tikzuml control nodes style}=[fill=black, inner sep=1.5pt, circle]%
\tikzstyle{tikzuml inherit style}=[color=\tikzumldrawcolor, -open triangle 45]%
\tikzstyle{tikzuml implements style}=[color=\tikzumldrawcolor, -open triangle 45, dashed]%
\tikzstyle{tikzuml association style}=[color=\tikzumldrawcolor, -]%
\tikzstyle{tikzuml unidirectional association style}=[color=\tikzumldrawcolor, -angle 45]%
\tikzstyle{tikzuml aggregation style}=[color=\tikzumldrawcolor, open diamond-]%
\tikzstyle{tikzuml unidirectional aggregation style}=[color=\tikzumldrawcolor, open diamond-angle 45]%
\tikzstyle{tikzuml composition style}=[color=\tikzumldrawcolor, diamond-]%
\tikzstyle{tikzuml unidirectional composition style}=[color=\tikzumldrawcolor, diamond-angle 45]%
\tikzstyle{tikzuml dependency style}=[color=\tikzumldrawcolor, -angle 45, dashed]%
\tikzstyle{tikzuml import style}=[color=\tikzumldrawcolor, -angle 45, dashed]%

\tikzstyle{tikzuml state style}=[rectangle split, rectangle split parts=2, rounded corners, inner xsep=1.5ex]%
\tikzstyle{tikzuml state transition style}=[color=\tikzumldrawcolor, rounded corners, -angle 45]%

\tikzstyle{tikzuml synchron-msg style}=[color=\tikzumldrawcolor, -triangle 45]%
\tikzstyle{tikzuml asynchron-msg style}=[color=\tikzumldrawcolor, -angle 45]%
\tikzstyle{tikzuml call return style}=[color=\tikzumldrawcolor, dashed, -angle 45]%

\newcounter{tikzumlPackageClassNum}%
\newcounter{tikzumlPackageSubPackageNum}%
\newcounter{tikzumlRelationNum}%
\setcounter{tikzumlRelationNum}{1}%
\newcounter{tikzumlNoteNum}%
\setcounter{tikzumlNoteNum}{1}%
\newcounter{tikzumlStateSpecialStateNum}%
\newcounter{tikzumlStateSubStateNum}%

\newcounter{pos}%
\newcounter{posT}%
\newcounter{posStereo}%

\newcounter{tikzumlPackageLevel}%
\setcounter{tikzumlPackageLevel}{0}%

% utility : change default colors
\newcommand{\tikzumlset}[1]{%
  \pgfkeys{/tikzuml/.cd,#1}%
  \pgfkeys{/tikzuml/.cd, text/.get=\tikzumltextcolor, draw/.get=\tikzumldrawcolor, font/.get=\tikzumlfont,%
                       fill class/.get=\tikzumlfillclasscolor, fill template/.get=\tikzumlfilltemplatecolor,%
                       fill package/.get=\tikzumlfillpackagecolor, fill note/.get=\tikzumlfillnotecolor,%
                       fill usecase/.get=\tikzumlfillusecasecolor, fill system/.get=\tikzumlfillsystemcolor,%
                       fill state/.get=\tikzumlfillstatecolor,%
                       fill object/.get=\tikzumlfillobjectcolor}%
}%

% define a point
\newcommand{\umlpoint}[1]{%
    \begin{pgfonlayer}{connections}%
    \node[tikzuml control nodes style] at (#1) {};%
    \end{pgfonlayer}%
}%

\newcommand{\tikzumlskipescape}[3][_]{%
\begingroup%
    \def\_{#1}\edef\x{\endgroup%
      \def\noexpand\csname #3\endcsname{#2}}\x%
}%

% define a uml package
%  arg : package name
%  optional args : x, y coordinates of the package
%                  draw, fill, text colors
\newenvironment{umlpackage}[2][]%
{%
  \ifnum\thetikzumlPackageLevel>0%
    \let\tikzumlPackage@nameold\tikzumlPackage@fitname%
    \def\tikzumlPackage@name{#2}%
    \begingroup%
      \def\_{@}\edef\x{\endgroup%
        \def\noexpand\tikzumlPackage@fitname{\tikzumlPackage@name}}\x%
    \let\tikzumlPackage@parentold\tikzumlPackage@parent%
    \edef\tikzumlPackage@parent{\tikzumlPackage@parentold @@\tikzumlPackage@nameold}%
  \else%
    \def\tikzumlPackage@parent{}%
    \def\tikzumlPackage@name{#2}%
    \begingroup%
      \def\_{@}\edef\x{\endgroup%
        \def\noexpand\tikzumlPackage@fitname{\tikzumlPackage@name}}\x%
  \fi%
  %
  \let\tikzumlPackage@nodeNameold\tikzumlPackage@nodeName%
  %  
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlPackage@nodeName{\tikzumlPackage@name}}\x%
  %
  \expandafter\gdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{}%
  %
  \setcounter{tikzumlPackageClassNum}{0}%
  \setcounter{tikzumlPackageSubPackageNum}{0}%
  \stepcounter{tikzumlPackageLevel}%
  
  \pgfkeys{/tikzuml/package/.cd, x/.initial=0, y/.initial=0, x/.default=0, y/.default=0,%
                                 draw/.initial=\tikzumldrawcolor, fill/.initial=\tikzumlfillpackagecolor, text/.initial=\tikzumltextcolor,%
                                 .unknown/.code={%
                                   \let\keyname=\pgfkeyscurrentname%
                                   \errmessage{TIKZUML ERROR : invalid option \keyname in umlpackage}%
                                 }}%
  \pgfkeys{/tikzuml/package/.cd, #1}%
  \pgfkeys{/tikzuml/package/.cd, x/.get=\xshift, y/.get=\yshift, draw/.get=\tikzumlpackagedraw, fill/.get=\tikzumlpackagefill, text/.get=\tikzumlpackagetext}%
  %
  \begin{scope}[xshift=\xshift cm, yshift=\yshift cm]%
}{%
  \addtocounter{tikzumlPackageLevel}{-1}%
  \begin{pgfonlayer}{package\thetikzumlPackageLevel}%
  %
  % if contains no class, one define a fictive node to enable the fit option
  \ifnum\c@tikzumlPackageClassNum=0%
    \ifnum\c@tikzumlPackageSubPackageNum=0%
      \node[inner sep=1.5ex] (\tikzumlPackage@nodeName-root) at (0,0) {\phantom{\tikzumlPackage@nodeName}};%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{(\tikzumlPackage@nodeName-root)}%
      %
    \fi%
  \fi%
  %
  \ifnum\c@tikzumlPackageLevel>0%
    \def\tikzumlPackageFitTmp{\csname tikzumlPackageFit\tikzumlPackage@parent\endcsname}%
    \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent\endcsname{\tikzumlPackageFitTmp (\tikzumlPackage@nodeName) (\tikzumlPackage@nodeName-caption)}%
    \stepcounter{tikzumlPackageSubPackageNum}%
  \fi%
  %  
  \node[draw=\tikzumlpackagedraw, fill=\tikzumlpackagefill, text=\tikzumlpackagetext, font=\tikzumlfont, inner sep=1.5ex, fit = \csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname] (\tikzumlPackage@nodeName) {};%
  \node[draw=\tikzumlpackagedraw, fill=\tikzumlpackagefill, text=\tikzumlpackagetext, font=\tikzumlfont, minimum height=1.5em, outer ysep=-0.3, anchor=south west] (\tikzumlPackage@nodeName-caption) at (\tikzumlPackage@nodeName.north west) {\tikzumlPackage@name};%
  \end{pgfonlayer}%
  \end{scope}%
}%

% shortcut to define an empty package
\newcommand{\umlemptypackage}[2][]{\begin{umlpackage}[#1]{#2} \end{umlpackage}}%

% define a uml class
% arg : name of the class
% optional args : x,y coordinates of the class
%                 width of the class node
%                 type of class (class, interface, typedef, enum)
%                 template parameters
%                 draw, fill, text colors
\newenvironment{umlclassenv}[2][]%
{%
  \pgfkeys{/tikzuml/class/.cd, x/.initial=0, y/.initial=0, width/.initial=10ex, type/.initial=class, template/.initial={},%
                               draw/.initial=\tikzumldrawcolor, fill template/.initial=\tikzumlfilltemplatecolor, fill/.initial=\tikzumlfillclasscolor,%
                               text/.initial=\tikzumltextcolor, .unknown/.code={%
                                 \let\keyname=\pgfkeyscurrentname%
                                 \errmessage{TIKZUML ERROR : invalid option \keyname in umlclass}%
                               }}%
  \pgfkeys{/tikzuml/class/.cd,#1}%
  \pgfkeys{/tikzuml/class/.cd, x/.get=\umlclassX, y/.get=\umlclassY, width/.get=\umlclassMinimumWidth, type/.get=\umlclassType, template/.get=\umlclassTemplateParam,%
                               draw/.get=\tikzumlclassdraw, fill/.get=\tikzumlclassfill, text/.get=\tikzumlclasstext, fill template/.get=\tikzumlclasstemplate}%
  %
  \ifthenelse{\equal{\umlclassType}{class}}{%
    \def\tikzumlClassType{}%
  }{%
    \def\tikzumlClassType{$<<$\umlclassType$>>$ \\}%
  }%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
    \def\tikzumlClassVPadding{}%
    \def\tikzumlClassHPadding{}%
  }{%
    \def\tikzumlClassVPadding{\vspace{0.1em} \\}%
    \def\tikzumlClassHPadding{\hspace{0.1em} $ $}%
  }%
  %
  \def\tikzumlClassName{#2}%
  %
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlClassNodeName{\tikzumlClassName}}\x%
  %
%  \edef\tikzumlClassNodeName{\detokenize\expandafter{\tikzumlClassName}}
%  \def\tikzumlClassNodeName{#2}
  
%  \begingroup 
%    \catcode`\_ \active 
%    \lccode`\~`\_ 
%    \lowercase{\def~{\noexpand\_}} 
%    \endlinechar-1 
%    \scantokens\expandafter{\expandafter\def\expandafter 
%        \x\expandafter{\tikzumlClassNodeName}}% 
%           \edef\x{\endgroup 
%              \def\noexpand\tikzumlClassName{\x}}\x
  %
  \def\tikzumlClassPos{\umlclassX,\umlclassY}%
  \def\tikzumlClassAttributes{}%
  \def\tikzumlClassOperations{}%
  \def\tikzumlClassAbstractClass{}%
  \def\tikzumlClassInterface{}%
  %
}{%
  \node[tikzuml class style, draw=\tikzumlclassdraw, fill=\tikzumlclassfill, text=\tikzumlclasstext, font=\tikzumlfont, minimum width=\umlclassMinimumWidth] (\tikzumlClassNodeName) at (\tikzumlClassPos) {\begin{tabular}{c}\tikzumlClassVPadding \tikzumlClassType \tikzumlClassHPadding \textbf{\tikzumlClassName} \tikzumlClassHPadding \end{tabular}%
  \nodepart{second}%
  \begin{tabular}{l}%
  \tikzumlClassAttributes%
  \end{tabular}%
  \nodepart{third}%
  \begin{tabular}{l}%
  \tikzumlClassOperations%
  \end{tabular}%
  };%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{}{%
    \draw (\tikzumlClassNodeName.north east) node[tikzuml template style, name=\tikzumlClassNodeName-template, draw=\tikzumlclassdraw, fill=\tikzumlclasstemplate, text=\tikzumlclasstext, font=\tikzumlfont] {\umlclassTemplateParam};%
  }%
  %
  % add to fit
  \ifnum\c@tikzumlPackageLevel>0%
    \edef\tikzumlPackageFitOld{\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname}%
    \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName)}%
    }{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName) (\tikzumlClassNodeName-template)}%
    }%
    \stepcounter{tikzumlPackageClassNum}%
  \fi%
}%

% shortcuts for interface, enum and typedef environments
\newenvironment{umlinterfaceenv}[2][]{\begin{umlclassenv}[type=interface,#1]{#2}}{\end{umlclassenv}}%
\newenvironment{umltypedefenv}[2][]{\begin{umlclassenv}[type=typedef,#1]{#2}}{\end{umlclassenv}}%
\newenvironment{umlenumenv}[2][]{\begin{umlclassenv}[type=enum,#1]{#2}}{\end{umlclassenv}}%

% define a uml class
% args : name of the class
%        attributes of the class
%        operations of the class
% optional args : x,y coordinates of the class
%                 width of the class node
%                 type of class (class, interface, typedef, enum)
%                 template parameters
%                 draw, fill, text colors
\newcommand{\umlclass}[4][]%
{%
  \pgfkeys{/tikzuml/class/.cd, x/.initial=0, y/.initial=0, width/.initial=10ex, type/.initial=class, template/.initial={},%
                               draw/.initial=\tikzumldrawcolor, fill template/.initial=\tikzumlfilltemplatecolor, fill/.initial=\tikzumlfillclasscolor,%
                               text/.initial=\tikzumltextcolor, .unknown/.code={%
                                 \let\keyname=\pgfkeyscurrentname%
                                 \errmessage{TIKZUML ERROR : invalid option \keyname in umlclass}%
                               }}%
  \pgfkeys{/tikzuml/class/.cd,#1}%
  \pgfkeys{/tikzuml/class/.cd, x/.get=\umlclassX, y/.get=\umlclassY, width/.get=\umlclassMinimumWidth, type/.get=\umlclassType, template/.get=\umlclassTemplateParam,%
                               draw/.get=\tikzumlclassdraw, fill/.get=\tikzumlclassfill, text/.get=\tikzumlclasstext, fill template/.get=\tikzumlclasstemplate}%
  %
  \ifthenelse{\equal{\umlclassType}{class}}{%
    \def\tikzumlClassType{}%
  }{%
    \def\tikzumlClassType{$<<$\umlclassType$>>$ \\}%
  }%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
    \def\tikzumlClassVPadding{}%
    \def\tikzumlClassHPadding{}%
  }{%
    \def\tikzumlClassVPadding{\vspace{0.6em} \\}%
    \def\tikzumlClassHPadding{\hspace{0.1em} $ $}%
  }%
  %
  \def\tikzumlClassName{#2}%
  %
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlClassNodeName{\tikzumlClassName}}\x%
  %
%  \edef\tikzumlClassNodeName{\detokenize\expandafter{\tikzumlClassName}}
%  \def\tikzumlClassNodeName{#2}
  
%  \begingroup 
%    \catcode`\_ \active 
%    \lccode`\~`\_ 
%    \lowercase{\def~{\noexpand\_}} 
%    \endlinechar-1 
%    \scantokens\expandafter{\expandafter\def\expandafter 
%        \x\expandafter{\tikzumlClassNodeName}}% 
%           \edef\x{\endgroup 
%              \def\noexpand\tikzumlClassName{\x}}\x
  %
  \def\tikzumlClassPos{\umlclassX,\umlclassY}%
  \def\tikzumlClassAttributes{#3}%
  \def\tikzumlClassOperations{#4}%
  %
  \node[tikzuml class style, draw=\tikzumlclassdraw, fill=\tikzumlclassfill, text=\tikzumlclasstext, font=\tikzumlfont, minimum width=\umlclassMinimumWidth] (\tikzumlClassNodeName) at (\tikzumlClassPos) {\begin{tabular}{c}\tikzumlClassVPadding \tikzumlClassType \tikzumlClassHPadding \textbf{\tikzumlClassName} \tikzumlClassHPadding \end{tabular}%
  \nodepart{second}%
  \begin{tabular}{l}%
  \tikzumlClassAttributes%
  \end{tabular}%
  \nodepart{third}%
  \begin{tabular}{l}%
  \tikzumlClassOperations%
  \end{tabular}%
  };%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{}{%
    \draw (\tikzumlClassNodeName.north east) node[tikzuml template style, name=\tikzumlClassNodeName-template, draw=\tikzumlclassdraw, fill=\tikzumlclasstemplate, text=\tikzumlclasstext, font=\tikzumlfont] {\umlclassTemplateParam};%
  }%
  %
  % add to fit
  \ifnum\c@tikzumlPackageLevel>0%
    \edef\tikzumlPackageFitOld{\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname}%
    \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName)}%
    }{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName) (\tikzumlClassNodeName-template)}%
    }%
    \stepcounter{tikzumlPackageClassNum}%
  \fi%
}%

% shortcuts for interface, enum and typedef environments
\newcommand{\umlinterface}[4][]{\umlclass[type=interface,#1]{#2}{#3}{#4}}%
\newcommand{\umltypedef}[4][]{\umlclass[type=typedef,#1]{#2}{#3}{#4}}%
\newcommand{\umlenum}[4][]{\umlclass[type=enum,#1]{#2}{#3}{#4}}%

% shortcut to define an empty class
\newcommand{\umlemptyclass}[2][]{\umlclass[#1]{#2}{}{}}%

% define a class attribute
\newcommand{\umlattr}[1]{\def\tikzumlClassAttributes{#1}}%

% underline the text for static arg
\newcommand{\umlstatic}[1]{\underline{#1}}%
\newcommand{\umlvirt}[1]{\textit{#1}}%

% define a class operation
\newcommand{\umlop}[1]{\def\tikzumlClassOperations{#1}}%



%%% End of tikz-uml.sty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%