%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Start of tikz-uml.sty
%
% Some macros for UML Diagrams.
% Home page of project: 
% Author: Nicolas Kielbasiewicz
% Style from: 
% Fixed by Nicolas Kielbasiewicz (nicolas.kielbasiewicz@ensta-paristech.fr) in dec 2010 to compile with pgf 2.00

\NeedsTeXFormat{LaTeX2e}[1995/12/01]%
\ProvidesPackage{tikz-uml}[2011/01/26]%

\RequirePackage{ifthen}%
\RequirePackage{tikz}%
\RequirePackage{calc}%
\RequirePackage{pgfopts}%
\usetikzlibrary{arrows,shapes,fit,shadows}%

\def\tikzumlPackageLayersNum{2}
\pgfkeys{/tikzuml/options/.cd, packageLayers/.initial=3}%
\pgfkeys{/tikzuml/options/.cd, packageLayers/.store in=\tikzumlPackageLayersNum}%
\def\tikzumlStateLayersNum{2}
\pgfkeys{/tikzuml/options/.cd, stateLayers/.initial=3}%
\pgfkeys{/tikzuml/options/.cd, stateLayers/.store in=\tikzumlStateLayersNum}%

\ProcessPgfOptions{/tikzuml/options}

\def\pgfsetlayersArg{background}%
\newcounter{tikzumlStateLayers}%
%\setcounter{tikzumlStateLayers}{0}%
\newcounter{tikzumlPackageLayers}%
%\setcounter{tikzumlPackageLayers}{0}%
\pgfdeclarelayer{background}%
\loop \pgfdeclarelayer{state\thetikzumlStateLayers}%
  \xdef\pgfsetlayersArg{\pgfsetlayersArg,state\thetikzumlStateLayers}%
  \ifnum\tikzumlStateLayersNum>\thetikzumlStateLayers
  \stepcounter{tikzumlStateLayers}%
\repeat%
%
\loop \pgfdeclarelayer{package\thetikzumlPackageLayers}%
  \xdef\pgfsetlayersArg{\pgfsetlayersArg,package\thetikzumlPackageLayers}%
  \ifnum\tikzumlPackageLayersNum>\thetikzumlPackageLayers
  \stepcounter{tikzumlPackageLayers}%
\repeat%
%
\pgfdeclarelayer{connections}%
\pgfdeclarelayer{threadground}%
\xdef\pgfsetlayersArg{\pgfsetlayersArg,connections,threadground,main}%
\pgfsetlayers{\pgfsetlayersArg}

\tikzstyle{every picture}+=[remember picture]

\pgfkeys{/tikzuml/.cd, text/.initial=black, draw/.initial=black, font/.initial=\small,%
                       fill class/.initial=yellow!20, fill template/.initial=yellow!2, fill package/.initial=blue!20, fill note/.initial=green!20,%
                       fill usecase/.initial=blue!20, fill system/.initial=white,%
                       fill state/.initial={yellow!20, yellow!5},%
                       fill object/.initial=yellow!20,%
                       .unknown/.code={%
                         \let\keyname=\pgfkeyscurrentname%
                         \errmessage{TIKZUML ERROR : invalid option \keyname in tikzumlset}%
                       }}%
\pgfkeys{/tikzuml/.cd, text/.get=\tikzumltextcolor, draw/.get=\tikzumldrawcolor, font/.get=\tikzumlfont,%
                       fill class/.get=\tikzumlfillclasscolor, fill template/.get=\tikzumlfilltemplatecolor,%
                       fill package/.get=\tikzumlfillpackagecolor, fill note/.get=\tikzumlfillnotecolor,%
                       fill usecase/.get=\tikzumlfillusecasecolor, fill system/.get=\tikzumlfillsystemcolor,%
                       fill state/.get=\tikzumlfillstatecolor,%
                       fill object/.get=\tikzumlfillobjectcolor}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       class diagrams                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pgfkeys{/tikzuml/relation/.cd, attr1/.style args={#1|#2}{arg1=#1, mult1=#2},%
                                attr2/.style args={#1|#2}{arg2=#1, mult2=#2},%
                                attr/.style args={#1|#2}{arg=#1, mult=#2},%
                                recursive/.style args={#1|#2|#3}{angle1=#1, angle2=#2, loopsize=#3},%
                                anchors/.style args={#1 and #2}{anchor1=#1, anchor2=#2}}%

\tikzstyle{tikzuml class style}=[rectangle split, rectangle split parts=3, minimum height=2em, minimum width=10ex, node distance=2em]%
\tikzstyle{tikzuml template style}=[dashed, inner ysep=0.7em, inner xsep=1ex]%
\tikzstyle{tikzuml control nodes style}=[fill=black, inner sep=1.5pt, circle]%
\tikzstyle{tikzuml inherit style}=[color=\tikzumldrawcolor, -open triangle 45]%
\tikzstyle{tikzuml implements style}=[color=\tikzumldrawcolor, -open triangle 45, dashed]%
\tikzstyle{tikzuml association style}=[color=\tikzumldrawcolor, -]%
\tikzstyle{tikzuml unidirectional association style}=[color=\tikzumldrawcolor, -angle 45]%
\tikzstyle{tikzuml aggregation style}=[color=\tikzumldrawcolor, open diamond-]%
\tikzstyle{tikzuml unidirectional aggregation style}=[color=\tikzumldrawcolor, open diamond-angle 45]%
\tikzstyle{tikzuml composition style}=[color=\tikzumldrawcolor, diamond-]%
\tikzstyle{tikzuml unidirectional composition style}=[color=\tikzumldrawcolor, diamond-angle 45]%
\tikzstyle{tikzuml dependency style}=[color=\tikzumldrawcolor, -angle 45, dashed]%
\tikzstyle{tikzuml import style}=[color=\tikzumldrawcolor, -angle 45, dashed]%

\tikzstyle{tikzuml state style}=[rectangle split, rectangle split parts=2, rounded corners, inner xsep=1.5ex]%
\tikzstyle{tikzuml state transition style}=[color=\tikzumldrawcolor, rounded corners, -angle 45]%

\tikzstyle{tikzuml synchron-msg style}=[color=\tikzumldrawcolor, -triangle 45]%
\tikzstyle{tikzuml asynchron-msg style}=[color=\tikzumldrawcolor, -angle 45]%
\tikzstyle{tikzuml call return style}=[color=\tikzumldrawcolor, dashed, -angle 45]%

\newcounter{tikzumlPackageClassNum}%
\newcounter{tikzumlPackageSubPackageNum}%
\newcounter{tikzumlRelationNum}%
\setcounter{tikzumlRelationNum}{1}%
\newcounter{tikzumlNoteNum}%
\setcounter{tikzumlNoteNum}{1}%
\newcounter{tikzumlStateSpecialStateNum}%
\newcounter{tikzumlStateSubStateNum}%

\newcounter{pos}%
\newcounter{posT}%
\newcounter{posStereo}%

\newcounter{tikzumlPackageLevel}%
\setcounter{tikzumlPackageLevel}{0}%

% utility : change default colors
\newcommand{\tikzumlset}[1]{%
  \pgfkeys{/tikzuml/.cd,#1}%
  \pgfkeys{/tikzuml/.cd, text/.get=\tikzumltextcolor, draw/.get=\tikzumldrawcolor, font/.get=\tikzumlfont,%
                       fill class/.get=\tikzumlfillclasscolor, fill template/.get=\tikzumlfilltemplatecolor,%
                       fill package/.get=\tikzumlfillpackagecolor, fill note/.get=\tikzumlfillnotecolor,%
                       fill usecase/.get=\tikzumlfillusecasecolor, fill system/.get=\tikzumlfillsystemcolor,%
                       fill state/.get=\tikzumlfillstatecolor,%
                       fill object/.get=\tikzumlfillobjectcolor}%
}%

% define a point
\newcommand{\umlpoint}[1]{%
    \begin{pgfonlayer}{connections}%
    \node[tikzuml control nodes style] at (#1) {};%
    \end{pgfonlayer}%
}%

\newcommand{\tikzumlskipescape}[3][_]{%
\begingroup%
    \def\_{#1}\edef\x{\endgroup%
      \def\noexpand\csname #3\endcsname{#2}}\x%
}%

% define a uml package
%  arg : package name
%  optional args : x, y coordinates of the package
%                  draw, fill, text colors
\newenvironment{umlpackage}[2][]%
{%
  \ifnum\thetikzumlPackageLevel>0%
    \let\tikzumlPackage@nameold\tikzumlPackage@fitname%
    \def\tikzumlPackage@name{#2}%
    \begingroup%
      \def\_{@}\edef\x{\endgroup%
        \def\noexpand\tikzumlPackage@fitname{\tikzumlPackage@name}}\x%
    \let\tikzumlPackage@parentold\tikzumlPackage@parent%
    \edef\tikzumlPackage@parent{\tikzumlPackage@parentold @@\tikzumlPackage@nameold}%
  \else%
    \def\tikzumlPackage@parent{}%
    \def\tikzumlPackage@name{#2}%
    \begingroup%
      \def\_{@}\edef\x{\endgroup%
        \def\noexpand\tikzumlPackage@fitname{\tikzumlPackage@name}}\x%
  \fi%
  %
  \let\tikzumlPackage@nodeNameold\tikzumlPackage@nodeName%
  %  
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlPackage@nodeName{\tikzumlPackage@name}}\x%
  %
  \expandafter\gdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{}%
  %
  \setcounter{tikzumlPackageClassNum}{0}%
  \setcounter{tikzumlPackageSubPackageNum}{0}%
  \stepcounter{tikzumlPackageLevel}%
  
  \pgfkeys{/tikzuml/package/.cd, x/.initial=0, y/.initial=0, x/.default=0, y/.default=0,%
                                 draw/.initial=\tikzumldrawcolor, fill/.initial=\tikzumlfillpackagecolor, text/.initial=\tikzumltextcolor,%
                                 .unknown/.code={%
                                   \let\keyname=\pgfkeyscurrentname%
                                   \errmessage{TIKZUML ERROR : invalid option \keyname in umlpackage}%
                                 }}%
  \pgfkeys{/tikzuml/package/.cd, #1}%
  \pgfkeys{/tikzuml/package/.cd, x/.get=\xshift, y/.get=\yshift, draw/.get=\tikzumlpackagedraw, fill/.get=\tikzumlpackagefill, text/.get=\tikzumlpackagetext}%
  %
  \begin{scope}[xshift=\xshift cm, yshift=\yshift cm]%
}{%
  \addtocounter{tikzumlPackageLevel}{-1}%
  \begin{pgfonlayer}{package\thetikzumlPackageLevel}%
  %
  % if contains no class, one define a fictive node to enable the fit option
  \ifnum\c@tikzumlPackageClassNum=0%
    \ifnum\c@tikzumlPackageSubPackageNum=0%
      \node[inner sep=1.5ex] (\tikzumlPackage@nodeName-root) at (0,0) {\phantom{\tikzumlPackage@nodeName}};%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{(\tikzumlPackage@nodeName-root)}%
      %
    \fi%
  \fi%
  %
  \ifnum\c@tikzumlPackageLevel>0%
    \def\tikzumlPackageFitTmp{\csname tikzumlPackageFit\tikzumlPackage@parent\endcsname}%
    \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent\endcsname{\tikzumlPackageFitTmp (\tikzumlPackage@nodeName) (\tikzumlPackage@nodeName-caption)}%
    \stepcounter{tikzumlPackageSubPackageNum}%
  \fi%
  %  
  \node[draw=\tikzumlpackagedraw, fill=\tikzumlpackagefill, text=\tikzumlpackagetext, font=\tikzumlfont, inner sep=1.5ex, fit = \csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname] (\tikzumlPackage@nodeName) {};%
  \node[draw=\tikzumlpackagedraw, fill=\tikzumlpackagefill, text=\tikzumlpackagetext, font=\tikzumlfont, minimum height=1.5em, outer ysep=-0.3, anchor=south west] (\tikzumlPackage@nodeName-caption) at (\tikzumlPackage@nodeName.north west) {\tikzumlPackage@name};%
  \end{pgfonlayer}%
  \end{scope}%
}%

% shortcut to define an empty package
\newcommand{\umlemptypackage}[2][]{\begin{umlpackage}[#1]{#2} \end{umlpackage}}%

% define a uml class
% arg : name of the class
% optional args : x,y coordinates of the class
%                 width of the class node
%                 type of class (class, interface, typedef, enum)
%                 template parameters
%                 draw, fill, text colors
\newenvironment{umlclassenv}[2][]%
{%
  \pgfkeys{/tikzuml/class/.cd, x/.initial=0, y/.initial=0, width/.initial=10ex, type/.initial=class, template/.initial={},%
                               draw/.initial=\tikzumldrawcolor, fill template/.initial=\tikzumlfilltemplatecolor, fill/.initial=\tikzumlfillclasscolor,%
                               text/.initial=\tikzumltextcolor, .unknown/.code={%
                                 \let\keyname=\pgfkeyscurrentname%
                                 \errmessage{TIKZUML ERROR : invalid option \keyname in umlclass}%
                               }}%
  \pgfkeys{/tikzuml/class/.cd,#1}%
  \pgfkeys{/tikzuml/class/.cd, x/.get=\umlclassX, y/.get=\umlclassY, width/.get=\umlclassMinimumWidth, type/.get=\umlclassType, template/.get=\umlclassTemplateParam,%
                               draw/.get=\tikzumlclassdraw, fill/.get=\tikzumlclassfill, text/.get=\tikzumlclasstext, fill template/.get=\tikzumlclasstemplate}%
  %
  \ifthenelse{\equal{\umlclassType}{class}}{%
    \def\tikzumlClassType{}%
  }{%
    \def\tikzumlClassType{$<<$\umlclassType$>>$ \\}%
  }%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
    \def\tikzumlClassVPadding{}%
    \def\tikzumlClassHPadding{}%
  }{%
    \def\tikzumlClassVPadding{\vspace{0.1em} \\}%
    \def\tikzumlClassHPadding{\hspace{0.1em} $ $}%
  }%
  %
  \def\tikzumlClassName{#2}%
  %
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlClassNodeName{\tikzumlClassName}}\x%
  %
%  \edef\tikzumlClassNodeName{\detokenize\expandafter{\tikzumlClassName}}
%  \def\tikzumlClassNodeName{#2}
  
%  \begingroup 
%    \catcode`\_ \active 
%    \lccode`\~`\_ 
%    \lowercase{\def~{\noexpand\_}} 
%    \endlinechar-1 
%    \scantokens\expandafter{\expandafter\def\expandafter 
%        \x\expandafter{\tikzumlClassNodeName}}% 
%           \edef\x{\endgroup 
%              \def\noexpand\tikzumlClassName{\x}}\x
  %
  \def\tikzumlClassPos{\umlclassX,\umlclassY}%
  \def\tikzumlClassAttributes{}%
  \def\tikzumlClassOperations{}%
  \def\tikzumlClassAbstractClass{}%
  \def\tikzumlClassInterface{}%
  %
}{%
  \node[tikzuml class style, draw=\tikzumlclassdraw, fill=\tikzumlclassfill, text=\tikzumlclasstext, font=\tikzumlfont, minimum width=\umlclassMinimumWidth] (\tikzumlClassNodeName) at (\tikzumlClassPos) {\begin{tabular}{c}\tikzumlClassVPadding \tikzumlClassType \tikzumlClassHPadding \textbf{\tikzumlClassName} \tikzumlClassHPadding \end{tabular}%
  \nodepart{second}%
  \begin{tabular}{l}%
  \tikzumlClassAttributes%
  \end{tabular}%
  \nodepart{third}%
  \begin{tabular}{l}%
  \tikzumlClassOperations%
  \end{tabular}%
  };%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{}{%
    \draw (\tikzumlClassNodeName.north east) node[tikzuml template style, name=\tikzumlClassNodeName-template, draw=\tikzumlclassdraw, fill=\tikzumlclasstemplate, text=\tikzumlclasstext, font=\tikzumlfont] {\umlclassTemplateParam};%
  }%
  %
  % add to fit
  \ifnum\c@tikzumlPackageLevel>0%
    \edef\tikzumlPackageFitOld{\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname}%
    \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName)}%
    }{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName) (\tikzumlClassNodeName-template)}%
    }%
    \stepcounter{tikzumlPackageClassNum}%
  \fi%
}%

% shortcuts for interface, enum and typedef environments
\newenvironment{umlinterfaceenv}[2][]{\begin{umlclassenv}[type=interface,#1]{#2}}{\end{umlclassenv}}%
\newenvironment{umltypedefenv}[2][]{\begin{umlclassenv}[type=typedef,#1]{#2}}{\end{umlclassenv}}%
\newenvironment{umlenumenv}[2][]{\begin{umlclassenv}[type=enum,#1]{#2}}{\end{umlclassenv}}%

% define a uml class
% args : name of the class
%        attributes of the class
%        operations of the class
% optional args : x,y coordinates of the class
%                 width of the class node
%                 type of class (class, interface, typedef, enum)
%                 template parameters
%                 draw, fill, text colors
\newcommand{\umlclass}[4][]%
{%
  \pgfkeys{/tikzuml/class/.cd, x/.initial=0, y/.initial=0, width/.initial=10ex, type/.initial=class, template/.initial={},%
                               draw/.initial=\tikzumldrawcolor, fill template/.initial=\tikzumlfilltemplatecolor, fill/.initial=\tikzumlfillclasscolor,%
                               text/.initial=\tikzumltextcolor, .unknown/.code={%
                                 \let\keyname=\pgfkeyscurrentname%
                                 \errmessage{TIKZUML ERROR : invalid option \keyname in umlclass}%
                               }}%
  \pgfkeys{/tikzuml/class/.cd,#1}%
  \pgfkeys{/tikzuml/class/.cd, x/.get=\umlclassX, y/.get=\umlclassY, width/.get=\umlclassMinimumWidth, type/.get=\umlclassType, template/.get=\umlclassTemplateParam,%
                               draw/.get=\tikzumlclassdraw, fill/.get=\tikzumlclassfill, text/.get=\tikzumlclasstext, fill template/.get=\tikzumlclasstemplate}%
  %
  \ifthenelse{\equal{\umlclassType}{class}}{%
    \def\tikzumlClassType{}%
  }{%
    \def\tikzumlClassType{$<<$\umlclassType$>>$ \\}%
  }%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
    \def\tikzumlClassVPadding{}%
    \def\tikzumlClassHPadding{}%
  }{%
    \def\tikzumlClassVPadding{\vspace{0.6em} \\}%
    \def\tikzumlClassHPadding{\hspace{0.1em} $ $}%
  }%
  %
  \def\tikzumlClassName{#2}%
  %
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlClassNodeName{\tikzumlClassName}}\x%
  %
%  \edef\tikzumlClassNodeName{\detokenize\expandafter{\tikzumlClassName}}
%  \def\tikzumlClassNodeName{#2}
  
%  \begingroup 
%    \catcode`\_ \active 
%    \lccode`\~`\_ 
%    \lowercase{\def~{\noexpand\_}} 
%    \endlinechar-1 
%    \scantokens\expandafter{\expandafter\def\expandafter 
%        \x\expandafter{\tikzumlClassNodeName}}% 
%           \edef\x{\endgroup 
%              \def\noexpand\tikzumlClassName{\x}}\x
  %
  \def\tikzumlClassPos{\umlclassX,\umlclassY}%
  \def\tikzumlClassAttributes{#3}%
  \def\tikzumlClassOperations{#4}%
  %
  \node[tikzuml class style, draw=\tikzumlclassdraw, fill=\tikzumlclassfill, text=\tikzumlclasstext, font=\tikzumlfont, minimum width=\umlclassMinimumWidth] (\tikzumlClassNodeName) at (\tikzumlClassPos) {\begin{tabular}{c}\tikzumlClassVPadding \tikzumlClassType \tikzumlClassHPadding \textbf{\tikzumlClassName} \tikzumlClassHPadding \end{tabular}%
  \nodepart{second}%
  \begin{tabular}{l}%
  \tikzumlClassAttributes%
  \end{tabular}%
  \nodepart{third}%
  \begin{tabular}{l}%
  \tikzumlClassOperations%
  \end{tabular}%
  };%
  %
  \ifthenelse{\equal{\umlclassTemplateParam}{}}{}{%
    \draw (\tikzumlClassNodeName.north east) node[tikzuml template style, name=\tikzumlClassNodeName-template, draw=\tikzumlclassdraw, fill=\tikzumlclasstemplate, text=\tikzumlclasstext, font=\tikzumlfont] {\umlclassTemplateParam};%
  }%
  %
  % add to fit
  \ifnum\c@tikzumlPackageLevel>0%
    \edef\tikzumlPackageFitOld{\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname}%
    \ifthenelse{\equal{\umlclassTemplateParam}{}}{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName)}%
    }{%
      \expandafter\xdef\csname tikzumlPackageFit\tikzumlPackage@parent @@\tikzumlPackage@fitname\endcsname{\tikzumlPackageFitOld (\tikzumlClassNodeName) (\tikzumlClassNodeName-template)}%
    }%
    \stepcounter{tikzumlPackageClassNum}%
  \fi%
}%

% shortcuts for interface, enum and typedef environments
\newcommand{\umlinterface}[4][]{\umlclass[type=interface,#1]{#2}{#3}{#4}}%
\newcommand{\umltypedef}[4][]{\umlclass[type=typedef,#1]{#2}{#3}{#4}}%
\newcommand{\umlenum}[4][]{\umlclass[type=enum,#1]{#2}{#3}{#4}}%

% shortcut to define an empty class
\newcommand{\umlemptyclass}[2][]{\umlclass[#1]{#2}{}{}}%

% define a class attribute
\newcommand{\umlattr}[1]{\def\tikzumlClassAttributes{#1}}%

% underline the text for static arg
\newcommand{\umlstatic}[1]{\underline{#1}}%
\newcommand{\umlvirt}[1]{\textit{#1}}%

% define a class operation
\newcommand{\umlop}[1]{\def\tikzumlClassOperations{#1}}%

% main command to define a relation between two classes
% args : src class
%        dest class
% optional args : geometry of the line
%               : barycentric weight
%               : name of the src class type attribute defined by the relation
%               : multiplicity of the src class type attribute defined by the relation
%               : position on the relation
%               : text justification on the relation
%               : name of the dest class type attribute defined by the relation
%               : multiplicity of the dest class type attribute defined by the relation
%               : position on the relation
%               : anchors on linked classes
%               : text justification on the relation
%               : start angle, end angle and size of the relation (only if recursive)
%               : stereotype of the relation
%               : style of the relation (association, aggregation, composition, inherit, ...)
\newcommand{\umlrelation}[3][]%
{%
  \pgfkeys{/tikzuml/relation/.cd, geometry/.initial=--, weight/.initial=0.5, arm1/.initial={auto}, arm2/.initial={auto},%
           arg1/.initial={}, arg2/.initial={}, arg/.initial={},%
           mult1/.initial={}, mult2/.initial={}, mult/.initial={},%
           pos1/.initial=0.2, pos2/.initial=0.8, pos/.initial={tikzumlEmpty},%
           align1/.initial={}, align2/.initial={}, align/.initial={},%
           anchor1/.initial={tikzumlEmpty}, anchor2/.initial={tikzumlEmpty},%
           angle1/.initial=-30, angle2/.initial=30, loopsize/.initial=3em,%
           stereo/.initial={}, pos stereo/.initial=0.5,%
           style/.initial=->, name/.initial=relation-\thetikzumlRelationNum,%
           .unknown/.code={%
             \let\keyname=\pgfkeyscurrentname%
             \errmessage{TIKZUML ERROR : invalid option \keyname in umlrelation}%
           }}%
  \pgfkeys{/tikzuml/relation/.cd,#1}%
  \pgfkeys{/tikzuml/relation/.cd, geometry/.get=\geometry, weight/.get=\weight, arm1/.get=\armO, arm2/.get=\armT,%
           arg1/.get=\attrName, arg2/.get=\attrNameTO, arg/.get=\attrNameTT,%
           mult1/.get=\multiplicity, mult2/.get=\multiplicityTO, mult/.get=\multiplicityTT,%
           pos1/.get=\position, pos2/.get=\positionTO, pos/.get=\positionTT,%
           align1/.get=\align, align2/.get=\alignTO, align/.get=\alignTT,%
           anchor1/.get=\tikzumlSrcAnchor, anchor2/.get=\tikzumlDestAnchor,%
           angle1/.get=\startangle, angle2/.get=\endangle, loopsize/.get=\loopsize,%
           stereo/.get=\stereo, pos stereo/.get=\positionStereotype,%
           style/.get=\style, name/.get=\relationName}%
  %
  % managing \_ in class names for node names
  \def\tikzumlSrcClassName{#2}%
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlSrcClassNodeName{\tikzumlSrcClassName}}\x%
%  \edef\tikzumlSrcClassNodeName{\detokenize\expandafter{\tikzumlSrcClassName}}  
  %
  \def\tikzumlDestClassName{#3}%
  \begingroup%
    \def\_{_}\edef\x{\endgroup%
      \def\noexpand\tikzumlDestClassNodeName{\tikzumlDestClassName}}\x%
%  \edef\tikzumlDestClassNodeName{\detokenize\expandafter{\tikzumlDestClassName}}
  %
  % managing alias keys
  \def\attrNameT{\attrNameTO\attrNameTT}%
  \def\multiplicityT{\multiplicityTO\multiplicityTT}%
  \def\alignT{\alignTO\alignTT}%
  \def\posAttrName{}%
  \def\posMultiplicity{}%
  \def\posAttrNameT{}%
  \def\posMultiplicityT{}%
  %
  \ifthenelse{\equal{\positionTT}{tikzumlEmpty}}%
  {%
    \def\positionT{\positionTO}%
  }{%
    \def\positionT{\positionTT}%
  }%
  %
  \def\attrAlign{}%
  \def\multAlign{}%
  \def\attrAlignT{}%
  \def\multAlignT{}%
  %
  \ifthenelse{\equal{\align}{left}}%
  {%
    \def\attrAlign{above right}%
    \def\multAlign{below right}%
  }{%
    \ifthenelse{\equal{\align}{right}}%
    {%
      \def\attrAlign{above left}%
      \def\multAlign{below left}%
    }{}%
  }%
  %
  \ifthenelse{\equal{\alignT}{left}}%
  {%
    \def\attrAlignT{above right}%
    \def\multAlignT{below right}%
  }{%
    \ifthenelse{\equal{\alignT}{right}}%
    {%
      \def\attrAlignT{above left}%
      \def\multAlignT{below left}%
    }{}%
  }%
  %
  % def stereotype
  \ifthenelse{\equal{\stereo}{}}%
  {%
    \def\stereotype{}%
  }{%
    \def\stereotype{$<<$\stereo$>>$}%
  }%
  
  % def anchors macros
  \ifthenelse{\equal{\tikzumlSrcAnchor}{tikzumlEmpty}}%
  {%
    \def\tikzumlSrcAnchor{}%
  }{%
    \let\tikzumlSrcAnchorold\tikzumlSrcAnchor%
    \def\tikzumlSrcAnchor{.\tikzumlSrcAnchorold}%
  }%
  %
  \ifthenelse{\equal{\tikzumlDestAnchor}{tikzumlEmpty}}%
  {%
    \def\tikzumlDestAnchor{}%
  }{%
    \let\tikzumlDestAnchorold\tikzumlDestAnchor%
    \def\tikzumlDestAnchor{.\tikzumlDestAnchorold}%
  }%
  %
  \setcounter{pos}{100*\real{\position}}%
  \setcounter{posT}{100*\real{\positionT}}%
  \setcounter{posStereo}{100*\real{\positionStereotype}}%
  %
  \pgfmathsetmacro{\weightT}{1-\real{\weight}}%
  %
  \def\tikzumlControlNodesNum{0}%
  %
  \def\pos{\position}%
  \def\posT{\positionT}%
  \def\posStereo{\positionStereotype}%
  %
  \node (\relationName-middle) at (barycentric cs:\tikzumlSrcClassNodeName=\weightT,\tikzumlDestClassNodeName=\weight) {};%
  %
  % straight line
  \ifthenelse{\equal{\geometry}{--}}%
  { %
    \ifthenelse{\equal{\tikzumlSrcClassNodeName}{\tikzumlDestClassNodeName}}{%
      \def\arcNum{1}%
      \def\arcNumT{1}%
      %
      \xdef\tikzumlLastArc{node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                           node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity}%
                           node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                           node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT}%
                           node[pos=\positionStereotype, anchor=center] {\stereotype} }%
      \xdef\tikzumlPath{(\tikzumlSrcClassNodeName) edge[in=\endangle, out=\startangle, distance=\loopsize] \tikzumlLastArc%
                                                        node[midway, name=\relationName-1, anchor=center] {} (\tikzumlDestClassNodeName) }%
    }{%
      \def\arcNum{1}%
      \def\arcNumT{1}%
      %
      \node (\relationName-1) at (\relationName-middle) {};%
      \xdef\tikzumlLastArc{node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                           node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity}%
                           node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                           node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT}%
                           node[pos=\positionStereotype, anchor=center] {\stereotype} }%
      \xdef\tikzumlPath{(\tikzumlSrcClassNodeName\tikzumlSrcAnchor) -- \tikzumlLastArc (\tikzumlDestClassNodeName\tikzumlDestAnchor) }%
    }%
  }{%
    % first vertical then horizontal line
    \ifthenelse{\equal{\geometry}{|-}}%
    {%
      \def\tikzumlControlNodesNum{1}%
      %
      \def\tikzumlFirstArc{node[midway, name=\relationName-1, anchor=center] {} }%
      \def\tikzumlLastArc{node[midway, name=\relationName-3, anchor=center]{} }%
      %
      \begin{pgfonlayer}{connections}%
      \node (\relationName-2) at (\tikzumlSrcClassNodeName\tikzumlSrcAnchor |- \tikzumlDestClassNodeName\tikzumlDestAnchor) {};%
      \end{pgfonlayer}%
      %
      \ifnum\theposStereo>100%
        \pgfmathsetmacro{\posStereo}{(\theposStereo-100)/100}%
        \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posStereo, anchor=center] {\stereotype} }%
      \else%
        \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posStereo, anchor=center] {\stereotype} }%
      \fi%
      %
      \ifnum\thepos>100%
        \pgfmathsetmacro{\pos}{(\thepos-100)/100}%
        \def\arcNum{2}%
      \else%
        \def\arcNum{1}%
        \ifnum\thepos=100%
          \def\posAttrName{above left}%
          \def\posMultiplicity{below right}%
        \fi%
      \fi%
      %
      \ifnum\arcNum=1%
        \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                               node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
      \fi%
      \ifnum\arcNum=2%
        \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                             node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
      \fi%
      %
      \ifnum\theposT>100%
        \pgfmathsetmacro{\posT}{(\theposT-100)/100}%
        \def\arcNumT{2}%
      \else%
        \def\arcNumT{1}%
        \ifnum\theposT=100%
          \def\posAttrNameT{above left}%
          \def\posMultiplicityT{below right}%
        \fi%
      \fi%
      %
      \ifnum\arcNumT=1%
        \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                               node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
      \fi%
      \ifnum\arcNumT=2%
        \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                             node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
      \fi%
      %
      \xdef\tikzumlPath{(\tikzumlSrcClassNodeName\tikzumlSrcAnchor) -- \tikzumlFirstArc (\relationName-2.base) -- \tikzumlLastArc (\tikzumlDestClassNodeName\tikzumlDestAnchor) }%
    }{%
      % first horizontal then vertical line
      \ifthenelse{\equal{\geometry}{-|}}%
      {%
        \def\tikzumlControlNodesNum{1}%
        %
        \def\tikzumlFirstArc{node[midway, name=\relationName-1, anchor=center]{} }%
        \def\tikzumlLastArc{node[midway, name=\relationName-3, anchor=center] {} }%
        %
        \begin{pgfonlayer}{connections}%
        \node (\relationName-2) at (\tikzumlSrcClassNodeName\tikzumlSrcAnchor -| \tikzumlDestClassNodeName\tikzumlDestAnchor) {};%
        \end{pgfonlayer}%
        %
        \ifnum\theposStereo>100%
          \pgfmathsetmacro{\posStereo}{(\theposStereo-100)/100}%
          \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posStereo, anchor=center] {\stereotype} }%
        \else%
          \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posStereo, anchor=center] {\stereotype} }%
        \fi%
        %
        \ifnum\thepos>100%
          \pgfmathsetmacro{\pos}{(\thepos-100)/100}%
          \def\arcNum{2}%
        \else%
          \def\arcNum{1}%
          \ifnum\thepos=100%
            \def\posAttrName{above left}%
            \def\posMultiplicity{below right}%
          \fi%
        \fi%
        %
        \ifnum\arcNum=1%
          \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                                 node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
        \fi%
        \ifnum\arcNum=2%
          \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                               node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
        \fi%
        %
        \ifnum\theposT>100%
          \pgfmathsetmacro{\posT}{(\theposT-100)/100}%
          \def\arcNumT{2}%
        \else%
          \def\arcNumT{1}%
          \ifnum\theposT=100%
            \def\posAttrNameT{above left}%
            \def\posMultiplicityT{below right}%
          \fi%
        \fi%
        %
        \ifnum\arcNumT=1%
          \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                                 node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
        \fi%
        \ifnum\arcNumT=2%
          \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                               node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
        \fi%
        %
        \xdef\tikzumlPath{(\tikzumlSrcClassNodeName\tikzumlSrcAnchor) -- \tikzumlFirstArc (\relationName-2.base) -- \tikzumlLastArc (\tikzumlDestClassNodeName\tikzumlDestAnchor) }%
      }{%
        % first vertical, then horizontal, finally vertical line
        \ifthenelse{\equal{\geometry}{|-|}}%
        {%
          \def\tikzumlControlNodesNum{2}%
          %
          \def\tikzumlFirstArc{node[midway, name=\relationName-1, anchor=center] {} }%
          \def\tikzumlLastArc{node[midway, name=\relationName-5, anchor=center] {} }%
          \def\tikzumlMidOneArc{ }%
          %
          \begin{pgfonlayer}{connections}%
          %
          \ifthenelse{\equal{\armO}{auto}}{%
            \ifthenelse{\equal{\armT}{auto}}{%
              \node (\relationName-3) at (\relationName-middle) {};%
              \node (\relationName-2) at (\tikzumlSrcClassNodeName\tikzumlSrcAnchor |- \relationName-3) {};%
              \node (\relationName-4) at (\relationName-3 -| \tikzumlDestClassNodeName\tikzumlDestAnchor) {};%
            }{
              \draw (\tikzumlDestClassNodeName\tikzumlDestAnchor)+(0,\armT) node[name=\relationName-4] {};
              \node (\relationName-2) at (\relationName-4 -| \tikzumlSrcClassNodeName\tikzumlSrcAnchor) {};%
              \node (\relationName-3) at (barycentric cs:\relationName-2=0.5,\relationName-4=0.5) {};%
            }
          }{
            \draw (\tikzumlSrcClassNodeName\tikzumlSrcAnchor)+(0,\armO) node[name=\relationName-2] {};
            \node (\relationName-4) at (\relationName-2 -| \tikzumlDestClassNodeName\tikzumlDestAnchor) {};%
            \node (\relationName-3) at (barycentric cs:\relationName-2=0.5,\relationName-4=0.5) {};%
          }
          \end{pgfonlayer}%
          %
          \ifnum\theposStereo>200%
            \pgfmathsetmacro{\posStereo}{(\theposStereo-200)/100}%
            \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posStereo, anchor=center] {\stereotype} }%
          \else%
            \ifnum\theposStereo<100%
              \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posStereo, anchor=center] {\stereotype} }%
            \else%
              \pgfmathsetmacro{\posStereo}{(\theposStereo-100)/100}%
              \xdef\tikzumlMidOneArc{\tikzumlMidOneArc node[pos=\posStereo, anchor=center] {\stereotype} }%
            \fi%
          \fi%
          %
          \ifthenelse{\thepos=200\OR\thepos=100}%
          {%
            \def\posAttrName{above left}%
            \def\posMultiplicity{below right}%
          }{}%
          %
          \ifthenelse{\thepos>200}%
          {%
            \pgfmathsetmacro{\pos}{(\thepos-200)/100}%
            \def\arcNum{3}%
          }{%
            \ifthenelse{\thepos<100}%
            {%
              \def\arcNum{1}%
            }{%
              \pgfmathsetmacro{\pos}{(\thepos-100)/100}%
              \def\arcNum{2}%
            }%
          }%
          %
          \ifnum\arcNum=1%
            \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                                   node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
          \fi%
          \ifnum\arcNum=2%
            \xdef\tikzumlMidOneArc{\tikzumlMidOneArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                                     node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
          \fi%
          \ifnum\arcNum=3%
            \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                                 node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
          \fi%
          %
          \ifthenelse{\theposT=200\OR\theposT=100}%
          {%
            \def\posAttrNameT{above left}%
            \def\posMultiplicityT{below right}%
          }{}%
          %
          \ifthenelse{\theposT>200}%
          {%
            \pgfmathsetmacro{\posT}{(\theposT-200)/100}%
            \def\arcNumT{3}%
          }{%
            \ifthenelse{\theposT<100}%
            {%
              \def\arcNumT{1}%
            }{%
              \pgfmathsetmacro{\posT}{(\theposT-100)/100}%
              \def\arcNumT{2}%
            }%
          }%
          %
          \ifnum\arcNumT=1%
            \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                                   node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
          \fi%
          \ifnum\arcNumT=2%
            \xdef\tikzumlMidOneArc{\tikzumlMidOneArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                                     node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
          \fi%
          \ifnum\arcNumT=3%
            \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                                 node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
          \fi%
          %
          \xdef\tikzumlPath{(\tikzumlSrcClassNodeName\tikzumlSrcAnchor) -- \tikzumlFirstArc (\relationName-2.base) -- \tikzumlMidOneArc (\relationName-4.base) -- \tikzumlLastArc (\tikzumlDestClassNodeName\tikzumlDestAnchor) }%
        }{%
          % first horizontal, then vertical, finally horizontal line
          \ifthenelse{\equal{\geometry}{-|-}}%
          {%
            \def\tikzumlControlNodesNum{2}%
            %
            \def\tikzumlFirstArc{node[midway, name=\relationName-1, anchor=center] {} }%
            \def\tikzumlLastArc{node[midway, name=\relationName-5, anchor=center] {} }%
            \def\tikzumlMidOneArc{}%
            %
            \begin{pgfonlayer}{connections}%
            %
            \ifthenelse{\equal{\armO}{auto}}{%
              \ifthenelse{\equal{\armT}{auto}}{%
                \node (\relationName-3) at (\relationName-middle) {};%
                \node (\relationName-2) at (\tikzumlSrcClassNodeName\tikzumlSrcAnchor -| \relationName-3) {};%
                \node (\relationName-4) at (\relationName-3 |- \tikzumlDestClassNodeName\tikzumlDestAnchor) {};%
              }{
                \draw (\tikzumlDestClassNodeName\tikzumlDestAnchor)+(\armT,0) node[name=\relationName-4] {};
                \node (\relationName-2) at (\relationName-4 |- \tikzumlSrcClassNodeName\tikzumlSrcAnchor) {};%
                \node (\relationName-3) at (barycentric cs:\relationName-2=0.5,\relationName-4=0.5) {};%
              }
            }{
              \draw (\tikzumlSrcClassNodeName\tikzumlSrcAnchor)+(\armO,0) node[name=\relationName-2] {};
              \node (\relationName-4) at (\relationName-2 |- \tikzumlDestClassNodeName\tikzumlDestAnchor) {};%
              \node (\relationName-3) at (barycentric cs:\relationName-2=0.5,\relationName-4=0.5) {};%
            }
          \end{pgfonlayer}%
          %
            %
            \ifnum\theposStereo>200%
              \pgfmathsetmacro{\posStereo}{(\theposStereo-200)/100}%
              \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posStereo, anchor=center] {\stereotype} }%
            \else%
              \ifnum\theposStereo<100%
                \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posStereo, anchor=center] {\stereotype} }%
              \else%
                \pgfmathsetmacro{\posStereo}{(\theposStereo-100)/100}%
                \xdef\tikzumlMidOneArc{\tikzumlMidOneArc node[pos=\posStereo, anchor=center] {\stereotype} }%
              \fi%
            \fi%
            %
            \ifthenelse{\thepos=200\OR\thepos=100}%
            {%
              \def\posAttrName{above left}%
              \def\posMultiplicity{below right}%
            }{}%
            %
            \ifthenelse{\thepos>200}%
            {%
              \pgfmathsetmacro{\pos}{(\thepos-200)/100}%
              \def\arcNum{3}%
            }{%
              \ifthenelse{\thepos<100}%
              {%
                \def\arcNum{1}%
              }{%
                \pgfmathsetmacro{\pos}{(\thepos-100)/100}%
                \def\arcNum{2}%
              }%
            }%
            %
            \ifnum\arcNum=1%
              \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                                     node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
            \fi%
            \ifnum\arcNum=2%
              \xdef\tikzumlMidOneArc{\tikzumlMidOneArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                                       node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
            \fi%
            \ifnum\arcNum=3%
              \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\pos, \posAttrName, \attrAlign] {\attrName}%
                                                   node[pos=\pos, swap, \posMultiplicity, \multAlign] {\multiplicity} }%
            \fi%
            %
            \ifthenelse{\theposT=200\OR\theposT=100}%
            {%
              \def\posAttrNameT{above left}%
              \def\posMultiplicityT{below right}%
            }{}%
            %
            \ifthenelse{\theposT>200}%
            {%
              \pgfmathsetmacro{\posT}{(\theposT-200)/100}%
              \def\arcNumT{3}%
            }{%
              \ifthenelse{\theposT<100}%
              {%
                \def\arcNumT{1}%
              }{%
                \pgfmathsetmacro{\posT}{(\theposT-100)/100}%
                \def\arcNumT{2}%
              }%
            }%
            %
            \ifnum\arcNumT=1%
              \xdef\tikzumlFirstArc{\tikzumlFirstArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                                     node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
            \fi%
            \ifnum\arcNumT=2%
              \xdef\tikzumlMidOneArc{\tikzumlMidOneArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                                       node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
            \fi%
            \ifnum\arcNumT=3%
              \xdef\tikzumlLastArc{\tikzumlLastArc node[pos=\posT, \posAttrNameT, \attrAlignT] {\attrNameT}%
                                                   node[pos=\posT, swap, \posMultiplicityT, \multAlignT] {\multiplicityT} }%
            \fi%
            %
            \xdef\tikzumlPath{(\tikzumlSrcClassNodeName\tikzumlSrcAnchor) -- \tikzumlFirstArc (\relationName-2.base) -- \tikzumlMidOneArc (\relationName-4.base) -- \tikzumlLastArc (\tikzumlDestClassNodeName\tikzumlDestAnchor) }%
          }{%
            \errmessage{TIKZUML ERROR : Unknown geometry value !!! It should be in the following list : --, |-, -|, |-|, -|-}%
          }%
        }%
      }%
    }%
  }%
  %
  \begin{pgfonlayer}{connections}%
  \draw[auto, \style, font=\tikzumlfont] \tikzumlPath ;%
  \end{pgfonlayer}%
  %
  \stepcounter{tikzumlRelationNum}%
}%

% define shortcuts of \umlrelation
\newcommand{\umlHVrelation}[3][]{%
  \pgfkeys{/tikzuml/HVrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{geometry}}{%
        \errmessage{TIKZUML ERROR : forbidden option geometry}%
      }{}%
    }%
  }%
  \pgfkeys{/tikzuml/HVrelation/.cd, #1}%
  \umlrelation[geometry=-|, #1]{#2}{#3}%
}%

\newcommand{\umlVHrelation}[3][]{%
  \pgfkeys{/tikzuml/VHrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{geometry}}{%
        \errmessage{TIKZUML ERROR : forbidden option geometry}%
      }{}%
    }%
  }%
  \pgfkeys{/tikzuml/VHrelation/.cd, #1}%
  \umlrelation[geometry=|-, #1]{#2}{#3}%
}%

\newcommand{\umlHVHrelation}[3][]{%
  \pgfkeys{/tikzuml/HVHrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{geometry}}{%
        \errmessage{TIKZUML ERROR : forbidden option geometry}%
      }{}%
    }%
  }%
  \pgfkeys{/tikzuml/HVHrelation/.cd, #1}%
  \umlrelation[geometry=-|-, #1]{#2}{#3}%
}%

\newcommand{\umlVHVrelation}[3][]{%
  \pgfkeys{/tikzuml/VHVrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{geometry}}{%
        \errmessage{TIKZUML ERROR : forbidden option geometry}%
      }{}%
    }%
  }%
  \pgfkeys{/tikzuml/VHVrelation/.cd, #1}%
  \umlrelation[geometry=|-|, #1]{#2}{#3}%
}%

% define relations' aliases
\newcommand{\umlinherit}[3][]{\umlrelation[style={tikzuml inherit style}, #1]{#2}{#3}}%
\newcommand{\umlimpl}[3][]{\umlrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlreal}[3][]{\umlrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlassoc}[3][]{\umlrelation[style={tikzuml association style}, #1]{#2}{#3}}%
\newcommand{\umluniassoc}[3][]{\umlrelation[style={tikzuml unidirectional association style}, #1]{#2}{#3}}%
\newcommand{\umlaggreg}[3][]{\umlrelation[style={tikzuml aggregation style}, #1]{#2}{#3}}%
\newcommand{\umluniaggreg}[3][]{\umlrelation[style={tikzuml unidirectional aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlcompo}[3][]{\umlrelation[style={tikzuml composition style}, #1]{#2}{#3}}%
\newcommand{\umlunicompo}[3][]{\umlrelation[style={tikzuml unidirectional composition style}, #1]{#2}{#3}}%
\newcommand{\umlimport}[3][]{\umlrelation[style={tikzuml import style}, #1]{#2}{#3}}%
\newcommand{\umldep}[3][]{\umlrelation[style={tikzuml dependency style}, #1]{#2}{#3}}%
\newcommand{\umlfriend}[3][]{%
  \pgfkeys{/tikzuml/friendrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{stereo}}{%
        \errmessage{TIKZUML ERROR : forbidden option stereo}%
      }{}%
    }%
  }%
  \pgfkeys{/tikzuml/friendrelation/.cd, #1}%
  \umlrelation[stereo=friend, style={tikzuml dependency style}, #1]{#2}{#3}%
}%

\newcommand{\umlHVinherit}[3][]{\umlHVrelation[style={tikzuml inherit style}, #1]{#2}{#3}}%
\newcommand{\umlHVimpl}[3][]{\umlHVrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlHVreal}[3][]{\umlHVrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlHVassoc}[3][]{\umlHVrelation[style={tikzuml association style}, #1]{#2}{#3}}%
\newcommand{\umlHVuniassoc}[3][]{\umlHVrelation[style={tikzuml unidirectional association style}, #1]{#2}{#3}}%
\newcommand{\umlHVaggreg}[3][]{\umlHVrelation[style={tikzuml aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlHVuniaggreg}[3][]{\umlHVrelation[style={tikzuml unidirectional aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlHVcompo}[3][]{\umlHVrelation[style={tikzuml composition style}, #1]{#2}{#3}}%
\newcommand{\umlHVunicompo}[3][]{\umlHVrelation[style={tikzuml unidirectional composition style}, #1]{#2}{#3}}%
\newcommand{\umlHVimport}[3][]{\umlHVrelation[style={tikzuml import style}, #1]{#2}{#3}}%
\newcommand{\umlHVdep}[3][]{\umlHVrelation[style={tikzuml dependency style}, #1]{#2}{#3}}%
\newcommand{\umlHVfriend}[3][]{%
  \pgfkeys{/tikzuml/friendrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{stereo}}{%
        \errmessage{TIKZUML ERROR : forbidden option stereo}%
      }{
        \ifthenelse{\equal{\keyname}{geometry}}{%
          \errmessage{TIKZUML ERROR : forbidden option geometry}%
        }{}%
      }%
    }%
  }%
  \pgfkeys{/tikzuml/friendrelation/.cd, #1}%
  \umlrelation[geometry=-|, stereo=friend, style={tikzuml dependency style}, #1]{#2}{#3}%
}%

\newcommand{\umlVHinherit}[3][]{\umlVHrelation[style={tikzuml inherit style}, #1]{#2}{#3}}%
\newcommand{\umlVHimpl}[3][]{\umlVHrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlVHreal}[3][]{\umlVHrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlVHassoc}[3][]{\umlVHrelation[style={tikzuml association style}, #1]{#2}{#3}}%
\newcommand{\umlVHuniassoc}[3][]{\umlVHrelation[style={tikzuml unidirectional association style}, #1]{#2}{#3}}%
\newcommand{\umlVHaggreg}[3][]{\umlVHrelation[style={tikzuml aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlVHuniaggreg}[3][]{\umlVHrelation[style={tikzuml unidirectional aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlVHcompo}[3][]{\umlVHrelation[style={tikzuml composition style}, #1]{#2}{#3}}%
\newcommand{\umlVHunicompo}[3][]{\umlVHrelation[style={tikzuml unidirectional composition style}, #1]{#2}{#3}}%
\newcommand{\umlVHimport}[3][]{\umlVHrelation[style={tikzuml import style}, #1]{#2}{#3}}%
\newcommand{\umlVHdep}[3][]{\umlVHrelation[style={tikzuml dependency style}, #1]{#2}{#3}}%
\newcommand{\umlVHfriend}[3][]{%
  \pgfkeys{/tikzuml/friendrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{stereo}}{%
        \errmessage{TIKZUML ERROR : forbidden option stereo}%
      }{
        \ifthenelse{\equal{\keyname}{geometry}}{%
          \errmessage{TIKZUML ERROR : forbidden option geometry}%
        }{}%
      }%
    }%
  }%
  \pgfkeys{/tikzuml/friendrelation/.cd, #1}%
  \umlrelation[geometry=|-, stereo=friend, style={tikzuml dependency style}, #1]{#2}{#3}%
}%

\newcommand{\umlHVHinherit}[3][]{\umlHVHrelation[style={tikzuml inherit style}, #1]{#2}{#3}}%
\newcommand{\umlHVHimpl}[3][]{\umlHVHrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlHVHreal}[3][]{\umlHVHrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlHVHassoc}[3][]{\umlHVHrelation[style={tikzuml association style}, #1]{#2}{#3}}%
\newcommand{\umlHVHuniassoc}[3][]{\umlHVHrelation[style={tikzuml unidirectional association style}, #1]{#2}{#3}}%
\newcommand{\umlHVHaggreg}[3][]{\umlHVHrelation[style={tikzuml aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlHVHuniaggreg}[3][]{\umlHVHrelation[style={tikzuml unidirectional aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlHVHcompo}[3][]{\umlHVHrelation[style={tikzuml composition style}, #1]{#2}{#3}}%
\newcommand{\umlHVHunicompo}[3][]{\umlHVHrelation[style={tikzuml unidirectional composition style}, #1]{#2}{#3}}%
\newcommand{\umlHVHimport}[3][]{\umlHVHrelation[style={tikzuml import style}, #1]{#2}{#3}}%
\newcommand{\umlHVHdep}[3][]{\umlHVHrelation[style={tikzuml dependency style}, #1]{#2}{#3}}%
\newcommand{\umlHVHfriend}[3][]{%
  \pgfkeys{/tikzuml/friendrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{stereo}}{%
        \errmessage{TIKZUML ERROR : forbidden option stereo}%
      }{
        \ifthenelse{\equal{\keyname}{geometry}}{%
          \errmessage{TIKZUML ERROR : forbidden option geometry}%
        }{}%
      }%
    }%
  }%
  \pgfkeys{/tikzuml/friendrelation/.cd, #1}%
  \umlrelation[geometry=-|-, stereo=friend, style={tikzuml dependency style}, #1]{#2}{#3}%
}%

\newcommand{\umlVHVinherit}[3][]{\umlVHVrelation[style={tikzuml inherit style}, #1]{#2}{#3}}%
\newcommand{\umlVHVimpl}[3][]{\umlVHVrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlVHVreal}[3][]{\umlVHVrelation[style={tikzuml implements style}, #1]{#2}{#3}}%
\newcommand{\umlVHVassoc}[3][]{\umlVHVrelation[style={tikzuml association style}, #1]{#2}{#3}}%
\newcommand{\umlVHVuniassoc}[3][]{\umlVHVrelation[style={tikzuml unidirectional association style}, #1]{#2}{#3}}%
\newcommand{\umlVHVaggreg}[3][]{\umlVHVrelation[style={tikzuml aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlVHVuniaggreg}[3][]{\umlVHVrelation[style={tikzuml unidirectional aggregation style}, #1]{#2}{#3}}%
\newcommand{\umlVHVcompo}[3][]{\umlVHVrelation[style={tikzuml composition style}, #1]{#2}{#3}}%
\newcommand{\umlVHVunicompo}[3][]{\umlVHVrelation[style={tikzuml unidirectional composition style}, #1]{#2}{#3}}%
\newcommand{\umlVHVimport}[3][]{\umlVHVrelation[style={tikzuml import style}, #1]{#2}{#3}}%
\newcommand{\umlVHVdep}[3][]{\umlVHVrelation[style={tikzuml dependency style}, #1]{#2}{#3}}%
\newcommand{\umlVHVfriend}[3][]{%
  \pgfkeys{/tikzuml/friendrelation/.cd, .unknown/.code={%
      \let\keyname=\pgfkeyscurrentname%
      \ifthenelse{\equal{\keyname}{stereo}}{%
        \errmessage{TIKZUML ERROR : forbidden option stereo}%
      }{
        \ifthenelse{\equal{\keyname}{geometry}}{%
          \errmessage{TIKZUML ERROR : forbidden option geometry}%
        }{}%
      }%
    }%
  }%
  \pgfkeys{/tikzuml/friendrelation/.cd, #1}%
  \umlrelation[geometry=|-|, stereo=friend, style={tikzuml dependency style}, #1]{#2}{#3}%
}%

%%% End of tikz-uml.sty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%